import 'package:flutter/material.dart';
import 'package:fl_chart/fl_chart.dart'; // si ya lo usás para el gráfico

class Level2EdaScreen extends StatelessWidget {
  const Level2EdaScreen({super.key});

  @override
  Widget build(BuildContext context) {
    final isMobile = MediaQuery.of(context).size.width < 700;

    return Scaffold(
      appBar: AppBar(
        title: const Text('Nivel 2 — Exploración de datos'),
        centerTitle: true,
      ),
      body: SafeArea(
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(16),
          child: isMobile
              ? Column(
                  crossAxisAlignment: CrossAxisAlignment.stretch,
                  children: [
                    _InsightBubble(
                      title: 'Recomendación',
                      message:
                          'Parmesano y Gouda lideran por pedidos. Destacá esos quesos en el menú.',
                    ),
                    const SizedBox(height: 16),
                    _ChartCard(
                      title: 'Puntaje por pedidos',
                      data: const {
                        'Mozzarella': 0,
                        'Parmesano': 1,
                        'Gouda': 1,
                        'Brie': 0,
                        'Azul': 0,
                        'Cheddar': 0,
                      },
                    ),
                    const SizedBox(height: 16),
                    _TopCheesesCard(
                      items: const [
                        _CheeseRow('Mozzarella', 0.0),
                        _CheeseRow('Cheddar', 0.0),
                        _CheeseRow('Parmesano', 4.6),
                        _CheeseRow('Gouda', 3.3),
                        _CheeseRow('Brie', 3.9),
                        _CheeseRow('Azul', 0.0),
                      ],
                    ),
                    const SizedBox(height: 24),
                    _NextButton(onPressed: () {
                      Navigator.pushNamed(context, '/level3');
                    }),
                  ],
                )
              : Row(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // Columna izquierda: Top quesos
                    Expanded(
                      child: _TopCheesesCard(
                        items: const [
                          _CheeseRow('Mozzarella', 0.0),
                          _CheeseRow('Cheddar', 0.0),
                          _CheeseRow('Parmesano', 4.6),
                          _CheeseRow('Gouda', 3.3),
                          _CheeseRow('Brie', 3.9),
                          _CheeseRow('Azul', 0.0),
                        ],
                      ),
                    ),
                    const SizedBox(width: 16),
                    // Centro: gráfico
                    Expanded(
                      child: Column(
                        children: [
                          _ChartCard(
                            title: 'Puntaje por pedidos',
                            data: const {
                              'Mozzarella': 0,
                              'Parmesano': 1,
                              'Gouda': 1,
                              'Brie': 0,
                              'Azul': 0,
                              'Cheddar': 0,
                            },
                          ),
                          const SizedBox(height: 16),
                          _NextButton(onPressed: () {
                            Navigator.pushNamed(context, '/level3');
                          }),
                        ],
                      ),
                    ),
                    const SizedBox(width: 16),
                    // Derecha: globo
                    Expanded(
                      child: _InsightBubble(
                        title: 'Recomendación',
                        message:
                            'Parmesano y Gouda lideran por pedidos. Destacá esos quesos en el menú.',
                      ),
                    ),
                  ],
                ),
        ),
      ),
    );
  }
}

/// Globo/nota de recomendación (se acomoda arriba en mobile)
class _InsightBubble extends StatelessWidget {
  final String title;
  final String message;
  const _InsightBubble({required this.title, required this.message});

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Theme.of(context).colorScheme.secondaryContainer.withValues(alpha: 0.5),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withValues(alpha: 0.04),
            blurRadius: 10,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Icon(Icons.lightbulb, size: 24),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(title,
                    style: Theme.of(context)
                        .textTheme
                        .titleMedium
                        ?.copyWith(fontWeight: FontWeight.w700)),
                const SizedBox(height: 6),
                Text(
                  message,
                  softWrap: true,
                  overflow: TextOverflow.visible,
                  style: Theme.of(context).textTheme.bodyMedium,
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

/// Tarjeta con el gráfico de barras (usa fl_chart)
class _ChartCard extends StatelessWidget {
  final String title;
  final Map<String, num> data;
  const _ChartCard({required this.title, required this.data});

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final labels = data.keys.toList();
    final values = data.values.map((e) => e.toDouble()).toList();

    return Container(
      padding: const EdgeInsets.fromLTRB(16, 16, 16, 8),
      decoration: BoxDecoration(
        color: theme.colorScheme.surface,
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withValues(alpha: 0.04),
            blurRadius: 10,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        children: [
          Align(
            alignment: Alignment.centerLeft,
            child: Text(title,
                style: Theme.of(context)
                    .textTheme
                    .titleMedium
                    ?.copyWith(fontWeight: FontWeight.w700)),
          ),
          const SizedBox(height: 12),
          SizedBox(
            height: 220,
            child: BarChart(
              BarChartData(
                alignment: BarChartAlignment.spaceAround,
                barTouchData: BarTouchData(enabled: true),
                gridData: FlGridData(
                  show: true,
                  drawVerticalLine: false,
                  getDrawingHorizontalLine: (value) => FlLine(
                    color: theme.dividerColor.withValues(alpha: 0.2),
                    strokeWidth: 1,
                  ),
                ),
                titlesData: FlTitlesData(
                  leftTitles: const AxisTitles(
                    sideTitles: SideTitles(showTitles: true, reservedSize: 28),
                  ),
                  rightTitles:
                      const AxisTitles(sideTitles: SideTitles(showTitles: false)),
                  topTitles:
                      const AxisTitles(sideTitles: SideTitles(showTitles: false)),
                  bottomTitles: AxisTitles(
                    sideTitles: SideTitles(
                      showTitles: true,
                      reservedSize: 38,
                      getTitlesWidget: (value, meta) {
                        final i = value.toInt();
                        if (i < 0 || i >= labels.length) return const SizedBox();
                        // Wrap para que no se corte en mobile
                        return Padding(
                          padding: const EdgeInsets.only(top: 6.0),
                          child: SizedBox(
                            width: 54,
                            child: Text(
                              labels[i],
                              textAlign: TextAlign.center,
                              softWrap: true,
                              style: Theme.of(context).textTheme.labelSmall,
                            ),
                          ),
                        );
                      },
                    ),
                  ),
                ),
                borderData: FlBorderData(show: false),
                barGroups: List.generate(labels.length, (i) {
                  return BarChartGroupData(
                    x: i,
                    barRods: [
                      BarChartRodData(
                        toY: values[i],
                        width: 18,
                        borderRadius: BorderRadius.circular(6),
                        color: theme.colorScheme.primary,
                      ),
                    ],
                  );
                }),
              ),
            ),
          ),
          const SizedBox(height: 12),
          // Chips con valores
          Wrap(
            spacing: 8,
            runSpacing: 8,
            children: [
              for (final entry in data.entries)
                Chip(
                  label: Text('${entry.key}: ${entry.value.toInt()}'),
                  visualDensity: VisualDensity.compact,
                ),
            ],
          ),
        ],
      ),
    );
  }
}

/// Card de “Top de quesos” en formato tabla simple
class _TopCheesesCard extends StatelessWidget {
  final List<_CheeseRow> items;
  const _TopCheesesCard({required this.items});

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    return Container(
      decoration: BoxDecoration(
        color: theme.colorScheme.surface,
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withValues(alpha: 0.04),
            blurRadius: 10,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        children: [
          Padding(
            padding: const EdgeInsets.fromLTRB(16, 16, 16, 8),
            child: Align(
              alignment: Alignment.centerLeft,
              child: Text(
                'Top de quesos',
                style: Theme.of(context)
                    .textTheme
                    .titleMedium
                    ?.copyWith(fontWeight: FontWeight.w700),
              ),
            ),
          ),
          const Divider(height: 1),
          for (final item in items) _CheeseRowTile(item: item),
        ],
      ),
    );
  }
}

class _CheeseRow {
  final String name;
  final double score;
  const _CheeseRow(this.name, this.score);
}

class _CheeseRowTile extends StatelessWidget {
  final _CheeseRow item;
  const _CheeseRowTile({required this.item});

  @override
  Widget build(BuildContext context) {
    return ListTile(
      dense: true,
      title: Text(item.name),
      trailing: Text(item.score.toStringAsFixed(1)),
      contentPadding: const EdgeInsets.symmetric(horizontal: 16),
      visualDensity: const VisualDensity(vertical: -2),
    );
  }
}

class _NextButton extends StatelessWidget {
  final VoidCallback onPressed;
  const _NextButton({required this.onPressed});

  @override
  Widget build(BuildContext context) {
    return FilledButton.icon(
      onPressed: onPressed,
      icon: const Icon(Icons.arrow_forward),
      label: const Text('Siguiente nivel'),
      style: FilledButton.styleFrom(padding: const EdgeInsets.all(14)),
    );
  }
}
